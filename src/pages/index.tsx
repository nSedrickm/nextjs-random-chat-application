import Head from "next/head";
import { SyntheticEvent, useEffect, useRef, useState } from "react";
import {
  Box,
  Container,
  Badge,
  Avatar,
  CssBaseline,
  IconButton,
  Typography,
  CardContent,
  Skeleton,
  Paper,
  InputBase,
  Button,
  Alert,
} from "@mui/material";
import { Send } from "@mui/icons-material";
import { useSendMessageMutation } from "@/features/api";
import { useAppDispatch, useAppSelector } from "@/hooks/typed-hooks";
import {
  IChat,
  clearChat,
  saveChat,
  selectChats,
} from "@/features/chats.slice";
import { getTimeStamp } from "@/utils";

const Home = () => {
  const chats = useAppSelector(selectChats);
  const dispatch = useAppDispatch();
  const chatBoxRef = useRef<HTMLElement>(null);
  const [sendMessage, { isLoading, isError }] = useSendMessageMutation();
  const [isDelayed, setIsDelayed] = useState<boolean>(false);

  async function handleGetResponse() {
    try {
      await sendMessage().unwrap();
    } catch (error) {
      // we are already using the isError var to show an Alert
    }
  }

  async function handleSendMessage(evt: SyntheticEvent) {
    evt.preventDefault();

    const target = evt.target as HTMLFormElement;
    const formData = new FormData(target);
    const { message } = Object.fromEntries(formData) as { message: string };
    target.reset();

    let request = {
      message,
      author: "user",
      timestamp: getTimeStamp(),
    } as IChat;

    // handle checks
    if (message.includes("/delay")) {
      setIsDelayed(true);
      let params = message.split(" ");
      let timeout = parseInt(params[1]);
      let text = params[2];
      // if there is a timeout and a message attached to the command
      if (timeout && text) {
        setTimeout(async () => {
          dispatch(saveChat(request));
          setIsDelayed(false);
          await handleGetResponse();
        }, timeout);
      }

      return;
    }

    dispatch(saveChat(request));
    await handleGetResponse();
  }

  // listen for chat changes and scroll the view
  useEffect(() => {
    chatBoxRef?.current?.scrollBy({
      top: chatBoxRef.current.scrollHeight,
      behavior: "smooth",
    });
  }, [chats, isDelayed]);

  return (
    <>
      <Head>
        <title>Random Chat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/icon?family=Material+Icons"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <CssBaseline />
        <Container maxWidth="xl" sx={{ p: { xs: 1, md: 4 } }}>
          {/* header */}
          <Box component="header" my={5}>
            <Typography
              variant="h2"
              align="center"
              fontWeight="bold"
              color="primary"
            >
              Random Chat
            </Typography>

            <Typography variant="h6" paragraph align="center" gutterBottom>
              Chat with a random bot online
            </Typography>
          </Box>

          <Box
            sx={{
              border: 1,
              borderRadius: 3,
              borderColor: "grey.100",
              boxShadow: { md: 1 },
              padding: { xs: 1, md: 4 },
              maxWidth: "md",
              margin: "0 auto",
              gap: 2,
            }}
          >
            {/* Bio */}

            <Box
              sx={{
                display: "flex",
                justifyContent: "space-between",
              }}
            >
              <Box
                sx={{
                  display: "flex",
                  flex: 1,
                  alignItems: "flex-start",
                  maxWidth: "md",
                  margin: "0 auto",
                  gap: 2,
                }}
              >
                <Badge
                  overlap="circular"
                  badgeContent=" "
                  color="success"
                  anchorOrigin={{
                    vertical: "bottom",
                    horizontal: "right",
                  }}
                >
                  <Avatar
                    alt="Bot"
                    src="https://i.pravatar.cc/64?img=2"
                    sx={{
                      width: 64,
                      height: 64,
                    }}
                  />
                </Badge>

                <Box mt={1}>
                  <Typography variant="h5" fontWeight="bold">
                    Akiva&lsquo;s Bot
                  </Typography>
                  <Typography variant="subtitle1" paragraph>
                    Online
                  </Typography>
                </Box>
              </Box>
              <Button onClick={() => dispatch(clearChat())}>Clear chat</Button>
            </Box>
            <Typography variant="body1" paragraph color="grey.600">
              This is the begining of your direct message history with
              Akiva&lsquo;s Bot
            </Typography>

            <Alert severity="info">
              You can also use the <strong>/delay</strong> to schedule a message
              <br />
              Format: <strong> /delay [time in ms] [message]</strong>
              <br />
              Example: <strong>/delay 1000 hello</strong>
            </Alert>

            {/* chats  */}

            <Box
              ref={chatBoxRef}
              sx={{
                display: "flex",
                flexDirection: "column",
                marginY: 4,
                gap: 2,
                border: 1,
                height: 500,
                borderRadius: 3,
                overflow: "auto",
                borderColor: "grey.300",
              }}
            >
              {chats.map(({ author, message, timestamp }, index) => (
                <Box
                  key={index}
                  sx={{
                    alignSelf: author === "bot" ? "flex-start" : "flex-end",
                    width: { md: "60%" },
                    minWidth: "60%",
                    boxShadow: 0,
                  }}
                >
                  <CardContent
                    sx={{
                      display: "flex",
                      alignItems: "flex-start",
                      flexDirection: author === "bot" ? "row" : "row-reverse",
                      gap: 2,
                    }}
                  >
                    <Avatar
                      alt={author === "bot" ? "Bot" : "User"}
                      src={
                        author === "bot" ? "https://i.pravatar.cc/48?img=2" : ""
                      }
                      sx={{
                        width: 48,
                        height: 48,
                      }}
                    />
                    <Box
                      sx={{
                        flex: 1,
                      }}
                    >
                      <Typography
                        variant="body1"
                        sx={{
                          backgroundColor:
                            author === "bot" ? "" : "primary.main",
                          color: author === "bot" ? "secondary" : "white",
                          boxShadow: 1,
                          borderRadius: 2,
                          padding: 2,
                        }}
                      >
                        {message}
                      </Typography>
                      <Typography
                        variant="body2"
                        mt={1}
                        align={author === "bot" ? "left" : "right"}
                      >
                        {timestamp}
                      </Typography>
                    </Box>
                  </CardContent>
                </Box>
              ))}

              {(isLoading || isDelayed) && (
                <Box
                  sx={{
                    display: "flex",
                    alignSelf: isDelayed ? "flex-end" : "flex-start",
                    flexDirection: isDelayed ? "row" : "row-reverse",
                    gap: 2,
                    padding: 2,
                    width: "60%",
                    alignItems: "center",
                  }}
                >
                  <Skeleton variant="circular">
                    <Avatar
                      sx={{
                        height: 48,
                        width: 48,
                      }}
                    />
                  </Skeleton>
                  <Box sx={{ flex: 1 }}>
                    <Skeleton animation="wave" height={75} />
                    <Skeleton
                      animation="wave"
                      height={12}
                      width={72}
                      sx={{
                        ml: isDelayed ? "auto" : "",
                      }}
                    />
                  </Box>
                </Box>
              )}

              {isError && (
                <Alert
                  variant="filled"
                  severity="error"
                  sx={{
                    margin: 2,
                    width: { md: "50%" },
                    alignItems: "center",
                    borderRadius: 2,
                  }}
                >
                  Sorry Bot failed to reply, please check your network and try
                  sending another message
                </Alert>
              )}
            </Box>
            {/* chat input */}
            <Paper
              component="form"
              sx={{
                px: 2,
                py: 1,
                borderRadius: 8,
                display: "flex",
                alignItems: "center",
                width: "100%",
              }}
              onSubmit={(evt: SyntheticEvent<HTMLFormElement>) =>
                handleSendMessage(evt)
              }
            >
              <InputBase
                sx={{ ml: 1, flex: 1 }}
                placeholder="send message"
                inputProps={{
                  "aria-label": "send message",
                  name: "message",
                  required: true,
                }}
              />
              <IconButton type="submit" aria-label="search" color="primary">
                <Send fontSize="large" />
              </IconButton>
            </Paper>
          </Box>
        </Container>
      </main>
    </>
  );
};

export default Home;
